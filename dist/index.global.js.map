{"version":3,"sources":["../src/index.ts","../src/utils/math.ts"],"sourcesContent":["export * from \"./utils/math\";\n","/**\n * Represents a point in 2D space\n */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Represents a rectangle defined by two corner points (x1,y1) and (x2,y2)\n */\ninterface Rect {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n\n// ========================\n// Basic Math Operations\n// ========================\n\n/**\n * Calculates the sum of two numbers\n * @param a First number\n * @param b Second number\n * @returns Sum of a and b\n */\nexport const sum = (a: number, b: number): number => a + b;\n\n/**\n * Calculates the average of numbers in an array\n * @param numbers Array of numbers\n * @returns Average value\n */\nexport const average = (numbers: number[]): number => {\n  return numbers.reduce((a, b) => a + b, 0) / numbers.length;\n};\n\n/**\n * Rounds a number to the nearest specified increment\n * @param value Number to round\n * @param nearest Nearest increment to round to\n * @returns Rounded value\n */\nexport const roundNearest = (value: number, nearest: number): number =>\n  Math.round(value / nearest) * nearest;\n\n// ========================\n// Linear Operations\n// ========================\n\n/**\n * Linear scaling function (map value from input range to output range)\n * @param value Input value to scale\n * @param inMin Minimum of input range\n * @param inMax Maximum of input range\n * @param outMin Minimum of output range\n * @param outMax Maximum of output range\n * @returns Scaled value\n */\nexport const linearScale = (\n  value: number,\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number\n): number => ((value - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n\n/**\n * Normalizes a value to a 0-1 range based on min/max bounds\n * @param value Value to normalize\n * @param min Minimum boundary\n * @param max Maximum boundary\n * @returns Normalized ratio (0-1)\n */\nexport const normalizeRatio = (\n  value: number,\n  min: number,\n  max: number\n): number => (value - min) / (max - min);\n\n/**\n * Linear interpolation between two values\n * @param a Start value\n * @param b End value\n * @param amount Interpolation amount (0-1)\n * @returns Interpolated value\n */\nexport const lerp = (a: number, b: number, amount: number): number =>\n  (1 - amount) * a + amount * b;\n\n// ========================\n// Point Operations\n// ========================\n\n/**\n * Calculates the midpoint between two points\n * @param a First point or tuple\n * @param b Second point or tuple\n * @returns Midpoint as [x, y] tuple\n */\nexport const midpoint = (\n  a: Point | [number, number],\n  b: Point | [number, number]\n): [number, number] => {\n  const p1 = Array.isArray(a) ? { x: a[0], y: a[1] } : a;\n  const p2 = Array.isArray(b) ? { x: b[0], y: b[1] } : b;\n  return [(p1.x + p2.x) / 2, (p1.y + p2.y) / 2];\n};\n\n/**\n * Calculates the distance between two points\n * @param p1 First point\n * @param p2 Second point\n * @returns Euclidean distance\n */\nexport const distance = (p1: Point, p2: Point): number =>\n  Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n\n/**\n * Checks if a point is inside a rectangle\n * @param point Point to check\n * @param rect Rectangle boundary\n * @returns True if point is inside the rectangle\n */\nexport const isInside = (point: Point, rect: Rect): boolean =>\n  point.x > rect.x1 &&\n  point.x < rect.x2 &&\n  point.y > rect.y1 &&\n  point.y < rect.y2;\n\n// ========================\n// Angle Operations\n// ========================\n\n/**\n * Converts radians to degrees\n * @param rad Angle in radians\n * @returns Angle in degrees\n */\nexport const radsToDegs = (rad: number): number => (rad * 180) / Math.PI;\n\n/**\n * Converts degrees to radians\n * @param deg Angle in degrees\n * @returns Angle in radians\n */\nexport const degsToRads = (deg: number): number => (deg * Math.PI) / 180.0;\n\n/**\n * Calculates angle in radians between two points\n * @param p1 First point\n * @param p2 Second point\n * @returns Angle in radians\n */\nexport const radiansAngle = (p1: Point, p2: Point): number =>\n  Math.atan2(p2.y - p1.y, p2.x - p1.x);\n\n/**\n * Calculates angle in degrees between two points\n * @param p1 First point\n * @param p2 Second point\n * @returns Angle in degrees\n */\nexport const degreesAngle = (p1: Point, p2: Point): number =>\n  radsToDegs(radiansAngle(p1, p2));\n\n// ========================\n// Rectangle Operations\n// ========================\n\n/**\n * Checks if two rectangles overlap\n * @param a First rectangle\n * @param b Second rectangle\n * @returns True if rectangles overlap\n */\nexport const overlaps = (a: Rect, b: Rect): boolean =>\n  a.x1 < b.x2 && b.x1 < a.x2 && a.y1 < b.y2 && b.y1 < a.y2;\n\n/**\n * Checks if rectangle A contains rectangle B\n * @param a Outer rectangle\n * @param b Inner rectangle\n * @returns True if A contains B\n */\nexport const contains = (a: Rect, b: Rect): boolean =>\n  a.x1 <= b.x1 && a.y1 <= b.y1 && a.x2 >= b.x2 && a.y2 >= b.y2;\n"],"mappings":"2bAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,EAAA,aAAAC,EAAA,iBAAAC,EAAA,eAAAC,EAAA,aAAAC,EAAA,aAAAC,EAAA,SAAAC,EAAA,gBAAAC,EAAA,aAAAC,EAAA,mBAAAC,EAAA,aAAAC,EAAA,iBAAAC,EAAA,eAAAC,EAAA,iBAAAC,EAAA,QAAAC,IC4BO,IAAMC,EAAM,CAACC,EAAWC,IAAsBD,EAAIC,EAO5CC,EAAWC,GACfA,EAAQ,OAAO,CAACH,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAIE,EAAQ,OASzCC,EAAe,CAACC,EAAeC,IAC1C,KAAK,MAAMD,EAAQC,CAAO,EAAIA,EAenBC,EAAc,CACzBF,EACAG,EACAC,EACAC,EACAC,KACaN,EAAQG,IAAUG,EAASD,IAAYD,EAAQD,GAASE,EAS1DE,EAAiB,CAC5BP,EACAQ,EACAC,KACYT,EAAQQ,IAAQC,EAAMD,GASvBE,EAAO,CAACf,EAAWC,EAAWe,KACxC,EAAIA,GAAUhB,EAAIgB,EAASf,EAYjBgB,EAAW,CACtBjB,EACAC,IACqB,CACrB,IAAMiB,EAAK,MAAM,QAAQlB,CAAC,EAAI,CAAE,EAAGA,EAAE,CAAC,EAAG,EAAGA,EAAE,CAAC,CAAE,EAAIA,EAC/CmB,EAAK,MAAM,QAAQlB,CAAC,EAAI,CAAE,EAAGA,EAAE,CAAC,EAAG,EAAGA,EAAE,CAAC,CAAE,EAAIA,EACrD,MAAO,EAAEiB,EAAG,EAAIC,EAAG,GAAK,GAAID,EAAG,EAAIC,EAAG,GAAK,CAAC,CAC9C,EAQaC,EAAW,CAACF,EAAWC,IAClC,KAAK,KAAK,KAAK,IAAIA,EAAG,EAAID,EAAG,EAAG,CAAC,EAAI,KAAK,IAAIC,EAAG,EAAID,EAAG,EAAG,CAAC,CAAC,EAQlDG,EAAW,CAACC,EAAcC,IACrCD,EAAM,EAAIC,EAAK,IACfD,EAAM,EAAIC,EAAK,IACfD,EAAM,EAAIC,EAAK,IACfD,EAAM,EAAIC,EAAK,GAWJC,EAAcC,GAAyBA,EAAM,IAAO,KAAK,GAOzDC,EAAcC,GAAyBA,EAAM,KAAK,GAAM,IAQxDC,EAAe,CAACV,EAAWC,IACtC,KAAK,MAAMA,EAAG,EAAID,EAAG,EAAGC,EAAG,EAAID,EAAG,CAAC,EAQxBW,EAAe,CAACX,EAAWC,IACtCK,EAAWI,EAAaV,EAAIC,CAAE,CAAC,EAYpBW,EAAW,CAAC9B,EAASC,IAChCD,EAAE,GAAKC,EAAE,IAAMA,EAAE,GAAKD,EAAE,IAAMA,EAAE,GAAKC,EAAE,IAAMA,EAAE,GAAKD,EAAE,GAQ3C+B,EAAW,CAAC/B,EAASC,IAChCD,EAAE,IAAMC,EAAE,IAAMD,EAAE,IAAMC,EAAE,IAAMD,EAAE,IAAMC,EAAE,IAAMD,EAAE,IAAMC,EAAE","names":["index_exports","__export","average","contains","degreesAngle","degsToRads","distance","isInside","lerp","linearScale","midpoint","normalizeRatio","overlaps","radiansAngle","radsToDegs","roundNearest","sum","sum","a","b","average","numbers","roundNearest","value","nearest","linearScale","inMin","inMax","outMin","outMax","normalizeRatio","min","max","lerp","amount","midpoint","p1","p2","distance","isInside","point","rect","radsToDegs","rad","degsToRads","deg","radiansAngle","degreesAngle","overlaps","contains"]}